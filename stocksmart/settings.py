"""
Django settings for stocksmart project.

Generated by 'django-admin startproject' using Django 3.2.5.

"""

import os
from distutils.util import strtobool
from pathlib import Path

import structlog
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(strtobool(os.getenv("DJANGO_DEBUG", "yes")))

CORS_ORIGIN_REGEX_WHITELIST = ("^(https?://)?(\w+\.)?stocksmart\.in",)
ALLOWED_HOSTS = [
    "devapi.stocksmart.in",
    "api.stocksmart.in",
    "stocksmart.in",
    "develop.stocksmart.in",
    "3.109.200.178",
    "ec2-3-109-200-178.ap-south-1.compute.amazonaws.com",
]

# Persist Max Connection Age for DB
# Value in Seconds
CONN_MAX_AGE = 30

if DEBUG:
    ALLOWED_HOSTS = ["*"]
    CORS_ORIGIN_REGEX_WHITELIST += ("http://localhost:3000",)
    CONN_MAX_AGE = 5

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "gm2m",
    # apps
    "user",
    "mentions",
    "post",
    "report",
    "smallcase",
    "stock",
    "news",
    "event_calendar",
    "watchlist",
    "notification",
    # Oauth
    "oauth2_provider",
    "social_django",
    # https://github.com/wagnerdelima/drf-social-oauth2
    "drf_social_oauth2",
    # Django Storages
    "storages",
    "django_celery_beat",
    # Channels
    "channels",
    "channels_redis",
]

AUTHENTICATION_BACKENDS = (
    # Django
    "django.contrib.auth.backends.ModelBackend",
    # Google  OAuth2
    "social_core.backends.google.GoogleOAuth2",
    # Twitter OAuth
    "social_core.backends.twitter.TwitterOAuth",
    # drf_social_oauth2
    "drf_social_oauth2.backends.DjangoOAuth2",
)

# Client URL
STOCKSMART_WEB_CLIENT = os.getenv("STOCKSMART_WEB_CLIENT", "http://localhost:3000")

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")
SOCIAL_AUTH_TWITTER_KEY = os.getenv("SOCIAL_AUTH_TWITTER_KEY")
SOCIAL_AUTH_TWITTER_SECRET = os.getenv("SOCIAL_AUTH_TWITTER_SECRET")

SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "common.middleware.exception_middleware.ErrorHandlerMiddleware",
]


ROOT_URLCONF = "stocksmart.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]


WSGI_APPLICATION = "stocksmart.wsgi.application"
ASGI_APPLICATION = "stocksmart.asgi.application"
AUTH_USER_MODEL = "user.User"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.getenv("DATABASE_NAME", "StocksmartDev"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST", "localhost"),
        "PORT": os.getenv("DATABASE_PORT", "5432"),
        "CONN_MAX_AGE": CONN_MAX_AGE,
    }
}

CACHE_TIMEOUT = int(os.getenv("CACHE_TIMEOUT", 2))
REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1")
REDIS_PORT = os.getenv("REDIS_PORT", 6379)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL.rstrip("/") + ":" + REDIS_PORT + "/1",
        "OPTIONS": {
            "SOCKET_CONNECT_TIMEOUT": CACHE_TIMEOUT,  # seconds
            "SOCKET_TIMEOUT": CACHE_TIMEOUT,  # seconds
            "IGNORE_EXCEPTIONS": not DEBUG,
        },
    },
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_URL.strip("redis://"), REDIS_PORT)],
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    "social_core.pipeline.user.get_username",
    # Enables associating the Emails to same user
    "social_core.pipeline.social_auth.associate_by_email",
    "social_core.pipeline.user.create_user",
    "user.helper.user_pipeline.cleanup_social_account",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
)
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
SOCIAL_AUTH_CLEAN_USERNAME_FUNCTION = (
    "user.helper.generate_username.replace_available_username"
)

# REST FRAMEWORK Config
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
        "drf_social_oauth2.authentication.SocialAuthentication",
        "common.auth.stocksmart_token_authentication.StocksmartTokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "EXCEPTION_HANDLER": "common.exception_handler.drf_exception_handler.custom_exception_handler",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 5,
}

# Small Case Credentials
SMALLCASE_SECRET = os.getenv("SMALLCASE_SECRET")
SMALLCASE_GATEWAY_SECRET = os.getenv("SMALLCASE_GATEWAY_SECRET")
SMALLCASE_GATEWAY_NAME = os.getenv("SMALLCASE_GATEWAY_NAME")

# NEWS API Credentials
NEWS_API_KEY = os.getenv("NEWS_API_KEY")

# 12Data API Key
TWELVE_DATA_API_KEY = os.getenv("TWELVE_DATA_API_KEY")

# Smallcase auth id of Stocksmart Account
STOCKSMART_SMALLCASE_AUTH_ID = os.getenv("STOCKSMART_SMALLCASE_AUTH_ID")

USERNAME_MAX_LENGTH = os.getenv("USERNAME_MAX_LENGTH", 12)
MAX_TRENDING_STOCKS = os.getenv("MAX_TRENDING_STOCKS", 3)
TICKER_REFRESH_FREQUENCY = int(os.getenv("TICKER_REFRESH_FREQUENCY", 5))

# S3 Storage Configurations
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")

AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME
AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_LOCATION = "static"
S3_URL = "https://%s" % AWS_S3_CUSTOM_DOMAIN

# public media settings
DEFAULT_FILE_STORAGE = "stocksmart.storage_backends.PublicMediaStorage"
MEDIA_DIRECTORY = "/media/"
MEDIA_URL = S3_URL + MEDIA_DIRECTORY

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "%(message)s",
        },
        "simple": {"format": "%(levelname)s %(message)s"},
        "json_formatter": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
        },
    },
    "filters": {"require_debug_true": {"()": "django.utils.log.RequireDebugTrue"}},
    "handlers": {
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        }
    },
    "loggers": {
        "django.server": {
            # Log messages related to the handling of requests received
            # by the server invoked by the runserver command.
            # Also used for logging every other information
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        }
    },
}

# Security Settings
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True

# CELERY settings
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://localhost:6379/0")
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = "Asia/Calcutta"
CELERY_RESULT_EXPIRES = 30


# Sendgrid email service settings
EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY", "xxx")
SENDGRID_SANDBOX_MODE_IN_DEBUG = False
SENDGRID_ECHO_TO_STDOUT = False

SS_FROM_EMAIL = "Stock Smart <support@stocksmart.in>"

APP_ENVIRONMENT = os.getenv("APP_ENVIRONMENT", "DEVELOPMENT")

if APP_ENVIRONMENT == "PRODUCTION":
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration
    import logging

    sentry_logging = LoggingIntegration(
        level=logging.INFO,  # Capture info and above as breadcrumbs
        event_level=logging.ERROR,  # Send errors as events
    )
    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN"),
        integrations=[DjangoIntegration(), sentry_logging],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        environment=APP_ENVIRONMENT,
    )
